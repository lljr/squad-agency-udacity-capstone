import { OutputPaths } from './wait-for-trees';
import Package, { V2AddonPackage } from './package';
import { Asset } from './asset';
import Options from './options';
import { MacrosConfig } from '@embroider/macros';
import { TransformOptions } from '@babel/core';
import { TemplateCompilerPlugins } from '.';
import { Resolver } from './resolver';
export declare type EmberENV = unknown;
export interface AppAdapter<TreeNames> {
    readonly allActiveAddons: V2AddonPackage[];
    activeAddonChildren(pkg: Package): V2AddonPackage[];
    appJSSrcDir(treePaths: OutputPaths<TreeNames>): string;
    fastbootJSSrcDir(treePaths: OutputPaths<TreeNames>): string | undefined;
    assets(treePaths: OutputPaths<TreeNames>): Asset[];
    autoRun(): boolean;
    appBoot(): string | undefined;
    mainModule(): string;
    mainModuleConfig(): unknown;
    modulePrefix(): string;
    rootURL(): string;
    templateCompilerPath(): string;
    templateResolver(): Resolver;
    resolvableExtensions(): string[];
    htmlbarsPlugins(): TemplateCompilerPlugins;
    babelConfig(): TransformOptions;
    babelMajorVersion(): 6 | 7;
    extraImports(): {
        absPath: string;
        target: string;
        runtimeName?: string;
    }[];
    emberENV(): EmberENV;
    strictV2Format(): boolean;
    developingAddons(): string[];
    env: string;
}
export declare function excludeDotFiles(files: string[]): string[];
export declare class AppBuilder<TreeNames> {
    private root;
    private app;
    private adapter;
    private options;
    private macrosConfig;
    private assets;
    constructor(root: string, app: Package, adapter: AppAdapter<TreeNames>, options: Required<Options>, macrosConfig: MacrosConfig);
    private scriptPriority;
    private readonly resolvableExtensionsPattern;
    private impliedAssets;
    private impliedAddonAssets;
    private babelParserConfig;
    private babelConfig;
    private adjustImportsPlugin;
    private insertEmberApp;
    private implicitScriptsAsset;
    private implicitStylesAsset;
    private implicitTestScriptsAsset;
    private implicitTestStylesAsset;
    private findActiveAddons;
    private partitionEngines;
    private readonly activeFastboot;
    private readonly fastbootConfig;
    private appDiffers;
    private updateAppJS;
    private prepareAsset;
    private prepareAssets;
    private assetIsValid;
    private updateOnDiskAsset;
    private updateInMemoryAsset;
    private updateBuiltEmberAsset;
    private updateConcatenatedAsset;
    private updateAssets;
    private gatherAssets;
    build(inputPaths: OutputPaths<TreeNames>): Promise<void>;
    private combinePackageJSON;
    private templateCompiler;
    private addTemplateCompiler;
    private addBabelConfig;
    private shouldSplitRoute;
    private splitRoute;
    private topAppJSAsset;
    private appJSAsset;
    private readonly modulePrefix;
    private importPaths;
    private routeEntrypoint;
    private testJSEntrypoint;
    private gatherImplicitModules;
}
